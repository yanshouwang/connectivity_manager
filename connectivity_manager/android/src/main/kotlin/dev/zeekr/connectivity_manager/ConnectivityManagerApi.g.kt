// Autogenerated from Pigeon (v26.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package dev.zeekr.connectivity_manager

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object ConnectivityManagerApiPigeonUtils {

  fun createConnectionError(channelName: String): ConnectivityManagerError {
    return ConnectivityManagerError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")  }

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is ConnectivityManagerError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class ConnectivityManagerError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()
/**
 * Maintains instances used to communicate with the corresponding objects in Dart.
 *
 * Objects stored in this container are represented by an object in Dart that is also stored in
 * an InstanceManager with the same identifier.
 *
 * When an instance is added with an identifier, either can be used to retrieve the other.
 *
 * Added instances are added as a weak reference and a strong reference. When the strong
 * reference is removed with [remove] and the weak reference is deallocated, the
 * `finalizationListener.onFinalize` is called with the instance's identifier. However, if the strong
 * reference is removed and then the identifier is retrieved with the intention to pass the identifier
 * to Dart (e.g. calling [getIdentifierForStrongReference]), the strong reference to the instance
 * is recreated. The strong reference will then need to be removed manually again.
 */
@Suppress("UNCHECKED_CAST", "MemberVisibilityCanBePrivate")
class ConnectivityManagerApiPigeonInstanceManager(private val finalizationListener: PigeonFinalizationListener) {
  /** Interface for listening when a weak reference of an instance is removed from the manager.  */
  interface PigeonFinalizationListener {
    fun onFinalize(identifier: Long)
  }

  // Extends WeakReference and overrides the `equals` and `hashCode` methods using identity rather
  // than equality.
  //
  // Two `IdentityWeakReference`s are equal if either
  // 1: `get()` returns the identical nonnull value for both references.
  // 2: `get()` returns null for both references and the references are identical.
  class IdentityWeakReference<T : Any> : java.lang.ref.WeakReference<T> {
    private val savedHashCode: Int

    constructor(instance: T) : this(instance, null)

    constructor(instance: T, queue: java.lang.ref.ReferenceQueue<T>?) : super(instance, queue) {
      savedHashCode = System.identityHashCode(instance)
    }

    override fun equals(other: Any?): Boolean {
      val instance = get()
      if (instance != null) {
        return other is IdentityWeakReference<*> && other.get() === instance
      }
      return other === this
    }

    override fun hashCode(): Int {
      return savedHashCode
    }
  }

  private val identifiers = java.util.WeakHashMap<IdentityWeakReference<Any>, Long>()
  private val weakInstances = HashMap<Long, IdentityWeakReference<Any>>()
  private val strongInstances = HashMap<Long, Any>()
  private val referenceQueue = java.lang.ref.ReferenceQueue<Any>()
  private val weakReferencesToIdentifiers = HashMap<IdentityWeakReference<Any>, Long>()
  private val handler = android.os.Handler(android.os.Looper.getMainLooper())
  private val releaseAllFinalizedInstancesRunnable = Runnable {
    this.releaseAllFinalizedInstances()
  }
  private var nextIdentifier: Long = minHostCreatedIdentifier
  private var hasFinalizationListenerStopped = false

  /**
   * Modifies the time interval used to define how often this instance removes garbage collected
   * weak references to native Android objects that this instance was managing.
   */
  var clearFinalizedWeakReferencesInterval: Long = 3000
    set(value) {
      handler.removeCallbacks(releaseAllFinalizedInstancesRunnable)
      field = value
      releaseAllFinalizedInstances()
    }

  init {
    handler.postDelayed(releaseAllFinalizedInstancesRunnable, clearFinalizedWeakReferencesInterval)
  }

  companion object {
    // Identifiers are locked to a specific range to avoid collisions with objects
    // created simultaneously from Dart.
    // Host uses identifiers >= 2^16 and Dart is expected to use values n where,
    // 0 <= n < 2^16.
    private const val minHostCreatedIdentifier: Long = 65536
    private const val tag = "PigeonInstanceManager"

    /**
     * Instantiate a new manager with a listener for garbage collected weak
     * references.
     *
     * When the manager is no longer needed, [stopFinalizationListener] must be called.
     */
    fun create(finalizationListener: PigeonFinalizationListener): ConnectivityManagerApiPigeonInstanceManager {
      return ConnectivityManagerApiPigeonInstanceManager(finalizationListener)
    }
  }

  /**
   * Removes `identifier` and return its associated strongly referenced instance, if present,
   * from the manager.
   */
  fun <T> remove(identifier: Long): T? {
    logWarningIfFinalizationListenerHasStopped()
    return strongInstances.remove(identifier) as T?
  }

  /**
   * Retrieves the identifier paired with an instance, if present, otherwise `null`.
   *
   *
   * If the manager contains a strong reference to `instance`, it will return the identifier
   * associated with `instance`. If the manager contains only a weak reference to `instance`, a new
   * strong reference to `instance` will be added and will need to be removed again with [remove].
   *
   *
   * If this method returns a nonnull identifier, this method also expects the Dart
   * `ConnectivityManagerApiPigeonInstanceManager` to have, or recreate, a weak reference to the Dart instance the
   * identifier is associated with.
   */
  fun getIdentifierForStrongReference(instance: Any?): Long? {
    logWarningIfFinalizationListenerHasStopped()
    if (instance == null) {
      return null
    }
    val identifier = identifiers[IdentityWeakReference(instance)]
    if (identifier != null) {
      strongInstances[identifier] = instance
    }
    return identifier
  }

  /**
   * Adds a new instance that was instantiated from Dart.
   *
   * The same instance can be added multiple times, but each identifier must be unique. This
   * allows two objects that are equivalent (e.g. the `equals` method returns true and their
   * hashcodes are equal) to both be added.
   *
   * [identifier] must be >= 0 and unique.
   */
  fun addDartCreatedInstance(instance: Any, identifier: Long) {
    logWarningIfFinalizationListenerHasStopped()
    addInstance(instance, identifier)
  }

  /**
   * Adds a new unique instance that was instantiated from the host platform.
   *
   * If the manager contains [instance], this returns the corresponding identifier. If the
   * manager does not contain [instance], this adds the instance and returns a unique
   * identifier for that [instance].
   */
  fun addHostCreatedInstance(instance: Any): Long {
    logWarningIfFinalizationListenerHasStopped()
    require(!containsInstance(instance)) { "Instance of ${instance.javaClass} has already been added." }
    val identifier = nextIdentifier++
    addInstance(instance, identifier)
    return identifier
  }

  /** Retrieves the instance associated with identifier, if present, otherwise `null`. */
  fun <T> getInstance(identifier: Long): T? {
    logWarningIfFinalizationListenerHasStopped()
    val instance = weakInstances[identifier] as IdentityWeakReference<T>?
    return instance?.get()
  }

  /** Returns whether this manager contains the given `instance`. */
  fun containsInstance(instance: Any?): Boolean {
    logWarningIfFinalizationListenerHasStopped()
    return instance != null && identifiers.containsKey(IdentityWeakReference(instance))
  }

  /**
   * Stops the periodic run of the [PigeonFinalizationListener] for instances that have been garbage
   * collected.
   *
   * The InstanceManager can continue to be used, but the [PigeonFinalizationListener] will no
   * longer be called and methods will log a warning.
   */
  fun stopFinalizationListener() {
    handler.removeCallbacks(releaseAllFinalizedInstancesRunnable)
    hasFinalizationListenerStopped = true
  }

  /**
   * Removes all of the instances from this manager.
   *
   * The manager will be empty after this call returns.
   */
  fun clear() {
    identifiers.clear()
    weakInstances.clear()
    strongInstances.clear()
    weakReferencesToIdentifiers.clear()
  }

  /**
   * Whether the [PigeonFinalizationListener] is still being called for instances that are garbage
   * collected.
   *
   * See [stopFinalizationListener].
   */
  fun hasFinalizationListenerStopped(): Boolean {
    return hasFinalizationListenerStopped
  }

  private fun releaseAllFinalizedInstances() {
    if (hasFinalizationListenerStopped()) {
      return
    }
    var reference: IdentityWeakReference<Any>?
    while ((referenceQueue.poll() as IdentityWeakReference<Any>?).also { reference = it } != null) {
      val identifier = weakReferencesToIdentifiers.remove(reference)
      if (identifier != null) {
        weakInstances.remove(identifier)
        strongInstances.remove(identifier)
        finalizationListener.onFinalize(identifier)
      }
    }
    handler.postDelayed(releaseAllFinalizedInstancesRunnable, clearFinalizedWeakReferencesInterval)
  }

  private fun addInstance(instance: Any, identifier: Long) {
    require(identifier >= 0) { "Identifier must be >= 0: $identifier" }
    require(!weakInstances.containsKey(identifier)) {
      "Identifier has already been added: $identifier"
    }
    val weakReference = IdentityWeakReference(instance, referenceQueue)
    identifiers[weakReference] = identifier
    weakInstances[identifier] = weakReference
    weakReferencesToIdentifiers[weakReference] = identifier
    strongInstances[identifier] = instance
  }

  private fun logWarningIfFinalizationListenerHasStopped() {
    if (hasFinalizationListenerStopped()) {
      Log.w(
        tag,
        "The manager was used after calls to the PigeonFinalizationListener has been stopped."
      )
    }
  }
}


/** Generated API for managing the Dart and native `InstanceManager`s. */
private class ConnectivityManagerApiPigeonInstanceManagerApi(val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by ConnectivityManagerApiPigeonInstanceManagerApi. */
    val codec: MessageCodec<Any?> by lazy {
      ConnectivityManagerApiPigeonCodec()
    }

    /**
     * Sets up an instance of `ConnectivityManagerApiPigeonInstanceManagerApi` to handle messages from the
     * `binaryMessenger`.
     */
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, instanceManager: ConnectivityManagerApiPigeonInstanceManager?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.PigeonInternalInstanceManager.removeStrongReference", codec)
        if (instanceManager != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              instanceManager.remove<Any?>(identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.PigeonInternalInstanceManager.clear", codec)
        if (instanceManager != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              instanceManager.clear()
              listOf(null)
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  fun removeStrongReference(identifierArg: Long, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.connectivity_manager.PigeonInternalInstanceManager.removeStrongReference"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
}
/**
 * Provides implementations for each ProxyApi implementation and provides access to resources
 * needed by any implementation.
 */
abstract class ConnectivityManagerApiPigeonProxyApiRegistrar(val binaryMessenger: BinaryMessenger) {
  /** Whether APIs should ignore calling to Dart. */
  public var ignoreCallsToDart = false
  val instanceManager: ConnectivityManagerApiPigeonInstanceManager
  private var _codec: MessageCodec<Any?>? = null
  val codec: MessageCodec<Any?>
    get() {
      if (_codec == null) {
        _codec = ConnectivityManagerApiPigeonProxyApiBaseCodec(this)
      }
      return _codec!!
    }

  init {
    val api = ConnectivityManagerApiPigeonInstanceManagerApi(binaryMessenger)
    instanceManager = ConnectivityManagerApiPigeonInstanceManager.create(
      object : ConnectivityManagerApiPigeonInstanceManager.PigeonFinalizationListener {
        override fun onFinalize(identifier: Long) {
          api.removeStrongReference(identifier) {
            if (it.isFailure) {
              Log.e(
                "PigeonProxyApiRegistrar",
                "Failed to remove Dart strong reference with identifier: $identifier"
              )
            }
          }
        }
      }
    )
  }
  /**
   * An implementation of [PigeonApiConnectivityManagerProxyApi] used to add a new Dart instance of
   * `ConnectivityManagerProxyApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiConnectivityManagerProxyApi(): PigeonApiConnectivityManagerProxyApi

  /**
   * An implementation of [PigeonApiConnectivityManagerNetworkCallbackProxyApi] used to add a new Dart instance of
   * `ConnectivityManagerNetworkCallbackProxyApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiConnectivityManagerNetworkCallbackProxyApi(): PigeonApiConnectivityManagerNetworkCallbackProxyApi

  /**
   * An implementation of [PigeonApiConnectivityManagerOnNetworkActiveListenerProxyApi] used to add a new Dart instance of
   * `ConnectivityManagerOnNetworkActiveListenerProxyApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiConnectivityManagerOnNetworkActiveListenerProxyApi(): PigeonApiConnectivityManagerOnNetworkActiveListenerProxyApi

  /**
   * An implementation of [PigeonApiNetworkProxyApi] used to add a new Dart instance of
   * `NetworkProxyApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiNetworkProxyApi(): PigeonApiNetworkProxyApi

  /**
   * An implementation of [PigeonApiNetworkInfoProxyApi] used to add a new Dart instance of
   * `NetworkInfoProxyApi` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiNetworkInfoProxyApi(): PigeonApiNetworkInfoProxyApi
  {
    return PigeonApiNetworkInfoProxyApi(this)
  }

  /**
   * An implementation of [PigeonApiNetworkRequestProxyApi] used to add a new Dart instance of
   * `NetworkRequestProxyApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiNetworkRequestProxyApi(): PigeonApiNetworkRequestProxyApi

  /**
   * An implementation of [PigeonApiNetworkCapabilitiesProxyApi] used to add a new Dart instance of
   * `NetworkCapabilitiesProxyApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiNetworkCapabilitiesProxyApi(): PigeonApiNetworkCapabilitiesProxyApi

  /**
   * An implementation of [PigeonApiNetworkSpecifierProxyApi] used to add a new Dart instance of
   * `NetworkSpecifierProxyApi` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiNetworkSpecifierProxyApi(): PigeonApiNetworkSpecifierProxyApi
  {
    return PigeonApiNetworkSpecifierProxyApi(this)
  }

  /**
   * An implementation of [PigeonApiLinkPropertiesProxyApi] used to add a new Dart instance of
   * `LinkPropertiesProxyApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiLinkPropertiesProxyApi(): PigeonApiLinkPropertiesProxyApi

  /**
   * An implementation of [PigeonApiLinkAddressProxyApi] used to add a new Dart instance of
   * `LinkAddressProxyApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiLinkAddressProxyApi(): PigeonApiLinkAddressProxyApi

  /**
   * An implementation of [PigeonApiIpPrefixProxyApi] used to add a new Dart instance of
   * `IpPrefixProxyApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiIpPrefixProxyApi(): PigeonApiIpPrefixProxyApi

  /**
   * An implementation of [PigeonApiSocketKeepaliveProxyApi] used to add a new Dart instance of
   * `SocketKeepaliveProxyApi` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiSocketKeepaliveProxyApi(): PigeonApiSocketKeepaliveProxyApi
  {
    return PigeonApiSocketKeepaliveProxyApi(this)
  }

  /**
   * An implementation of [PigeonApiSocketKeepaliveCallbackProxyApi] used to add a new Dart instance of
   * `SocketKeepaliveCallbackProxyApi` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiSocketKeepaliveCallbackProxyApi(): PigeonApiSocketKeepaliveCallbackProxyApi
  {
    return PigeonApiSocketKeepaliveCallbackProxyApi(this)
  }

  /**
   * An implementation of [PigeonApiIpSecManagerUdpEncapsulationSocketProxyApi] used to add a new Dart instance of
   * `IpSecManagerUdpEncapsulationSocketProxyApi` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiIpSecManagerUdpEncapsulationSocketProxyApi(): PigeonApiIpSecManagerUdpEncapsulationSocketProxyApi
  {
    return PigeonApiIpSecManagerUdpEncapsulationSocketProxyApi(this)
  }

  /**
   * An implementation of [PigeonApiProxyInfoProxyApi] used to add a new Dart instance of
   * `ProxyInfoProxyApi` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiProxyInfoProxyApi(): PigeonApiProxyInfoProxyApi
  {
    return PigeonApiProxyInfoProxyApi(this)
  }

  /**
   * An implementation of [PigeonApiTransportInfoProxyApi] used to add a new Dart instance of
   * `TransportInfoProxyApi` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiTransportInfoProxyApi(): PigeonApiTransportInfoProxyApi
  {
    return PigeonApiTransportInfoProxyApi(this)
  }

  /**
   * An implementation of [PigeonApiRouteInfoProxyApi] used to add a new Dart instance of
   * `RouteInfoProxyApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiRouteInfoProxyApi(): PigeonApiRouteInfoProxyApi

  /**
   * An implementation of [PigeonApiInetAddressesProxyApi] used to add a new Dart instance of
   * `InetAddressesProxyApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiInetAddressesProxyApi(): PigeonApiInetAddressesProxyApi

  /**
   * An implementation of [PigeonApiFileDescriptorProxyApi] used to add a new Dart instance of
   * `FileDescriptorProxyApi` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiFileDescriptorProxyApi(): PigeonApiFileDescriptorProxyApi
  {
    return PigeonApiFileDescriptorProxyApi(this)
  }

  /**
   * An implementation of [PigeonApiInetAddressProxyApi] used to add a new Dart instance of
   * `InetAddressProxyApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiInetAddressProxyApi(): PigeonApiInetAddressProxyApi

  /**
   * An implementation of [PigeonApiInet4AddressProxyApi] used to add a new Dart instance of
   * `Inet4AddressProxyApi` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiInet4AddressProxyApi(): PigeonApiInet4AddressProxyApi
  {
    return PigeonApiInet4AddressProxyApi(this)
  }

  /**
   * An implementation of [PigeonApiInet6AddressProxyApi] used to add a new Dart instance of
   * `Inet6AddressProxyApi` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiInet6AddressProxyApi(): PigeonApiInet6AddressProxyApi

  /**
   * An implementation of [PigeonApiInetSocketAddressProxyApi] used to add a new Dart instance of
   * `InetSocketAddressProxyApi` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiInetSocketAddressProxyApi(): PigeonApiInetSocketAddressProxyApi
  {
    return PigeonApiInetSocketAddressProxyApi(this)
  }

  /**
   * An implementation of [PigeonApiNetworkInterfaceProxyApi] used to add a new Dart instance of
   * `NetworkInterfaceProxyApi` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiNetworkInterfaceProxyApi(): PigeonApiNetworkInterfaceProxyApi
  {
    return PigeonApiNetworkInterfaceProxyApi(this)
  }

  /**
   * An implementation of [PigeonApiSocketProxyApi] used to add a new Dart instance of
   * `SocketProxyApi` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiSocketProxyApi(): PigeonApiSocketProxyApi
  {
    return PigeonApiSocketProxyApi(this)
  }

  /**
   * An implementation of [PigeonApiDatagramSocketProxyApi] used to add a new Dart instance of
   * `DatagramSocketProxyApi` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiDatagramSocketProxyApi(): PigeonApiDatagramSocketProxyApi
  {
    return PigeonApiDatagramSocketProxyApi(this)
  }

  /**
   * An implementation of [PigeonApiUrlProxyApi] used to add a new Dart instance of
   * `UrlProxyApi` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiUrlProxyApi(): PigeonApiUrlProxyApi
  {
    return PigeonApiUrlProxyApi(this)
  }

  /**
   * An implementation of [PigeonApiUrlConnectionProxyApi] used to add a new Dart instance of
   * `UrlConnectionProxyApi` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiUrlConnectionProxyApi(): PigeonApiUrlConnectionProxyApi
  {
    return PigeonApiUrlConnectionProxyApi(this)
  }

  /**
   * An implementation of [PigeonApiSocketFactoryProxyApi] used to add a new Dart instance of
   * `SocketFactoryProxyApi` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiSocketFactoryProxyApi(): PigeonApiSocketFactoryProxyApi
  {
    return PigeonApiSocketFactoryProxyApi(this)
  }

  /**
   * An implementation of [PigeonApiProxyProxyApi] used to add a new Dart instance of
   * `ProxyProxyApi` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiProxyProxyApi(): PigeonApiProxyProxyApi
  {
    return PigeonApiProxyProxyApi(this)
  }

  fun setUp() {
    ConnectivityManagerApiPigeonInstanceManagerApi.setUpMessageHandlers(binaryMessenger, instanceManager)
    PigeonApiConnectivityManagerProxyApi.setUpMessageHandlers(binaryMessenger, getPigeonApiConnectivityManagerProxyApi())
    PigeonApiConnectivityManagerNetworkCallbackProxyApi.setUpMessageHandlers(binaryMessenger, getPigeonApiConnectivityManagerNetworkCallbackProxyApi())
    PigeonApiConnectivityManagerOnNetworkActiveListenerProxyApi.setUpMessageHandlers(binaryMessenger, getPigeonApiConnectivityManagerOnNetworkActiveListenerProxyApi())
    PigeonApiNetworkProxyApi.setUpMessageHandlers(binaryMessenger, getPigeonApiNetworkProxyApi())
    PigeonApiNetworkRequestProxyApi.setUpMessageHandlers(binaryMessenger, getPigeonApiNetworkRequestProxyApi())
    PigeonApiNetworkCapabilitiesProxyApi.setUpMessageHandlers(binaryMessenger, getPigeonApiNetworkCapabilitiesProxyApi())
    PigeonApiLinkPropertiesProxyApi.setUpMessageHandlers(binaryMessenger, getPigeonApiLinkPropertiesProxyApi())
    PigeonApiLinkAddressProxyApi.setUpMessageHandlers(binaryMessenger, getPigeonApiLinkAddressProxyApi())
    PigeonApiIpPrefixProxyApi.setUpMessageHandlers(binaryMessenger, getPigeonApiIpPrefixProxyApi())
    PigeonApiRouteInfoProxyApi.setUpMessageHandlers(binaryMessenger, getPigeonApiRouteInfoProxyApi())
    PigeonApiInetAddressesProxyApi.setUpMessageHandlers(binaryMessenger, getPigeonApiInetAddressesProxyApi())
    PigeonApiInetAddressProxyApi.setUpMessageHandlers(binaryMessenger, getPigeonApiInetAddressProxyApi())
    PigeonApiInet6AddressProxyApi.setUpMessageHandlers(binaryMessenger, getPigeonApiInet6AddressProxyApi())
  }
  fun tearDown() {
    ConnectivityManagerApiPigeonInstanceManagerApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiConnectivityManagerProxyApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiConnectivityManagerNetworkCallbackProxyApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiConnectivityManagerOnNetworkActiveListenerProxyApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiNetworkProxyApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiNetworkRequestProxyApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiNetworkCapabilitiesProxyApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiLinkPropertiesProxyApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiLinkAddressProxyApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiIpPrefixProxyApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiRouteInfoProxyApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiInetAddressesProxyApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiInetAddressProxyApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiInet6AddressProxyApi.setUpMessageHandlers(binaryMessenger, null)
  }
}
private class ConnectivityManagerApiPigeonProxyApiBaseCodec(val registrar: ConnectivityManagerApiPigeonProxyApiRegistrar) : ConnectivityManagerApiPigeonCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        val identifier: Long = readValue(buffer) as Long
        val instance: Any? = registrar.instanceManager.getInstance(identifier)
        if (instance == null) {
          Log.e(
            "PigeonProxyApiBaseCodec",
            "Failed to find instance with identifier: $identifier"
          )
        }
        return instance
      }
      else -> super.readValueOfType(type, buffer)
    }
  }

  override fun writeValue(stream: ByteArrayOutputStream, value: Any?) {
    if (value is Boolean || value is ByteArray || value is Double || value is DoubleArray || value is FloatArray || value is Int || value is IntArray || value is List<*> || value is Long || value is LongArray || value is Map<*, *> || value is String || value is NetworkTypeApi || value is NetworkCapabilityApi || value is TransportTypeApi || value is RouteTypeApi || value is RestrictBackgroundStatusApi || value is ConnectivityManagerNetworkCallbackFlagApi || value == null) {
      super.writeValue(stream, value)
      return
    }

    fun logNewInstanceFailure(apiName: String, value: Any, exception: Throwable?) {
      Log.w(
        "PigeonProxyApiBaseCodec",
        "Failed to create new Dart proxy instance of $apiName: $value. $exception"
      )
    }

    if (value is android.net.ConnectivityManager) {
      registrar.getPigeonApiConnectivityManagerProxyApi().pigeon_newInstance(value) {
        if (it.isFailure) {
          logNewInstanceFailure("ConnectivityManagerProxyApi", value, it.exceptionOrNull())
        }
      }
    }
     else if (value is android.net.ConnectivityManager.NetworkCallback) {
      registrar.getPigeonApiConnectivityManagerNetworkCallbackProxyApi().pigeon_newInstance(value) {
        if (it.isFailure) {
          logNewInstanceFailure("ConnectivityManagerNetworkCallbackProxyApi", value, it.exceptionOrNull())
        }
      }
    }
     else if (value is android.net.ConnectivityManager.OnNetworkActiveListener) {
      registrar.getPigeonApiConnectivityManagerOnNetworkActiveListenerProxyApi().pigeon_newInstance(value) {
        if (it.isFailure) {
          logNewInstanceFailure("ConnectivityManagerOnNetworkActiveListenerProxyApi", value, it.exceptionOrNull())
        }
      }
    }
     else if (value is android.net.Network) {
      registrar.getPigeonApiNetworkProxyApi().pigeon_newInstance(value) {
        if (it.isFailure) {
          logNewInstanceFailure("NetworkProxyApi", value, it.exceptionOrNull())
        }
      }
    }
     else if (value is android.net.NetworkInfo) {
      registrar.getPigeonApiNetworkInfoProxyApi().pigeon_newInstance(value) {
        if (it.isFailure) {
          logNewInstanceFailure("NetworkInfoProxyApi", value, it.exceptionOrNull())
        }
      }
    }
     else if (value is android.net.NetworkRequest) {
      registrar.getPigeonApiNetworkRequestProxyApi().pigeon_newInstance(value) {
        if (it.isFailure) {
          logNewInstanceFailure("NetworkRequestProxyApi", value, it.exceptionOrNull())
        }
      }
    }
     else if (value is android.net.NetworkCapabilities) {
      registrar.getPigeonApiNetworkCapabilitiesProxyApi().pigeon_newInstance(value) {
        if (it.isFailure) {
          logNewInstanceFailure("NetworkCapabilitiesProxyApi", value, it.exceptionOrNull())
        }
      }
    }
     else if (android.os.Build.VERSION.SDK_INT >= 26 && value is android.net.NetworkSpecifier) {
      registrar.getPigeonApiNetworkSpecifierProxyApi().pigeon_newInstance(value) {
        if (it.isFailure) {
          logNewInstanceFailure("NetworkSpecifierProxyApi", value, it.exceptionOrNull())
        }
      }
    }
     else if (value is android.net.LinkProperties) {
      registrar.getPigeonApiLinkPropertiesProxyApi().pigeon_newInstance(value) {
        if (it.isFailure) {
          logNewInstanceFailure("LinkPropertiesProxyApi", value, it.exceptionOrNull())
        }
      }
    }
     else if (value is android.net.LinkAddress) {
      registrar.getPigeonApiLinkAddressProxyApi().pigeon_newInstance(value) {
        if (it.isFailure) {
          logNewInstanceFailure("LinkAddressProxyApi", value, it.exceptionOrNull())
        }
      }
    }
     else if (value is android.net.IpPrefix) {
      registrar.getPigeonApiIpPrefixProxyApi().pigeon_newInstance(value) {
        if (it.isFailure) {
          logNewInstanceFailure("IpPrefixProxyApi", value, it.exceptionOrNull())
        }
      }
    }
     else if (android.os.Build.VERSION.SDK_INT >= 29 && value is android.net.SocketKeepalive) {
      registrar.getPigeonApiSocketKeepaliveProxyApi().pigeon_newInstance(value) {
        if (it.isFailure) {
          logNewInstanceFailure("SocketKeepaliveProxyApi", value, it.exceptionOrNull())
        }
      }
    }
     else if (android.os.Build.VERSION.SDK_INT >= 29 && value is android.net.SocketKeepalive.Callback) {
      registrar.getPigeonApiSocketKeepaliveCallbackProxyApi().pigeon_newInstance(value) {
        if (it.isFailure) {
          logNewInstanceFailure("SocketKeepaliveCallbackProxyApi", value, it.exceptionOrNull())
        }
      }
    }
     else if (android.os.Build.VERSION.SDK_INT >= 28 && value is android.net.IpSecManager.UdpEncapsulationSocket) {
      registrar.getPigeonApiIpSecManagerUdpEncapsulationSocketProxyApi().pigeon_newInstance(value) {
        if (it.isFailure) {
          logNewInstanceFailure("IpSecManagerUdpEncapsulationSocketProxyApi", value, it.exceptionOrNull())
        }
      }
    }
     else if (value is android.net.ProxyInfo) {
      registrar.getPigeonApiProxyInfoProxyApi().pigeon_newInstance(value) {
        if (it.isFailure) {
          logNewInstanceFailure("ProxyInfoProxyApi", value, it.exceptionOrNull())
        }
      }
    }
     else if (android.os.Build.VERSION.SDK_INT >= 29 && value is android.net.TransportInfo) {
      registrar.getPigeonApiTransportInfoProxyApi().pigeon_newInstance(value) {
        if (it.isFailure) {
          logNewInstanceFailure("TransportInfoProxyApi", value, it.exceptionOrNull())
        }
      }
    }
     else if (value is android.net.RouteInfo) {
      registrar.getPigeonApiRouteInfoProxyApi().pigeon_newInstance(value) {
        if (it.isFailure) {
          logNewInstanceFailure("RouteInfoProxyApi", value, it.exceptionOrNull())
        }
      }
    }
     else if (android.os.Build.VERSION.SDK_INT >= 29 && value is android.net.InetAddresses) {
      registrar.getPigeonApiInetAddressesProxyApi().pigeon_newInstance(value) {
        if (it.isFailure) {
          logNewInstanceFailure("InetAddressesProxyApi", value, it.exceptionOrNull())
        }
      }
    }
     else if (value is java.io.FileDescriptor) {
      registrar.getPigeonApiFileDescriptorProxyApi().pigeon_newInstance(value) {
        if (it.isFailure) {
          logNewInstanceFailure("FileDescriptorProxyApi", value, it.exceptionOrNull())
        }
      }
    }
     else if (value is java.net.Inet4Address) {
      registrar.getPigeonApiInet4AddressProxyApi().pigeon_newInstance(value) {
        if (it.isFailure) {
          logNewInstanceFailure("Inet4AddressProxyApi", value, it.exceptionOrNull())
        }
      }
    }
     else if (value is java.net.Inet6Address) {
      registrar.getPigeonApiInet6AddressProxyApi().pigeon_newInstance(value) {
        if (it.isFailure) {
          logNewInstanceFailure("Inet6AddressProxyApi", value, it.exceptionOrNull())
        }
      }
    }
     else if (value is java.net.InetAddress) {
      registrar.getPigeonApiInetAddressProxyApi().pigeon_newInstance(value) {
        if (it.isFailure) {
          logNewInstanceFailure("InetAddressProxyApi", value, it.exceptionOrNull())
        }
      }
    }
     else if (value is java.net.InetSocketAddress) {
      registrar.getPigeonApiInetSocketAddressProxyApi().pigeon_newInstance(value) {
        if (it.isFailure) {
          logNewInstanceFailure("InetSocketAddressProxyApi", value, it.exceptionOrNull())
        }
      }
    }
     else if (value is java.net.NetworkInterface) {
      registrar.getPigeonApiNetworkInterfaceProxyApi().pigeon_newInstance(value) {
        if (it.isFailure) {
          logNewInstanceFailure("NetworkInterfaceProxyApi", value, it.exceptionOrNull())
        }
      }
    }
     else if (value is java.net.Socket) {
      registrar.getPigeonApiSocketProxyApi().pigeon_newInstance(value) {
        if (it.isFailure) {
          logNewInstanceFailure("SocketProxyApi", value, it.exceptionOrNull())
        }
      }
    }
     else if (value is java.net.DatagramSocket) {
      registrar.getPigeonApiDatagramSocketProxyApi().pigeon_newInstance(value) {
        if (it.isFailure) {
          logNewInstanceFailure("DatagramSocketProxyApi", value, it.exceptionOrNull())
        }
      }
    }
     else if (value is java.net.URL) {
      registrar.getPigeonApiUrlProxyApi().pigeon_newInstance(value) {
        if (it.isFailure) {
          logNewInstanceFailure("UrlProxyApi", value, it.exceptionOrNull())
        }
      }
    }
     else if (value is java.net.URLConnection) {
      registrar.getPigeonApiUrlConnectionProxyApi().pigeon_newInstance(value) {
        if (it.isFailure) {
          logNewInstanceFailure("UrlConnectionProxyApi", value, it.exceptionOrNull())
        }
      }
    }
     else if (value is javax.net.SocketFactory) {
      registrar.getPigeonApiSocketFactoryProxyApi().pigeon_newInstance(value) {
        if (it.isFailure) {
          logNewInstanceFailure("SocketFactoryProxyApi", value, it.exceptionOrNull())
        }
      }
    }
     else if (value is java.net.Proxy) {
      registrar.getPigeonApiProxyProxyApi().pigeon_newInstance(value) {
        if (it.isFailure) {
          logNewInstanceFailure("ProxyProxyApi", value, it.exceptionOrNull())
        }
      }
    }

    when {
      registrar.instanceManager.containsInstance(value) -> {
        stream.write(128)
        writeValue(stream, registrar.instanceManager.getIdentifierForStrongReference(value))
      }
      else -> throw IllegalArgumentException("Unsupported value: '$value' of type '${value.javaClass.name}'")
    }
  }
}

enum class NetworkTypeApi(val raw: Int) {
  MOBILE(0),
  WIFI(1),
  MOBILE_MMS(2),
  MOBILE_SUPL(3),
  MOBILE_DUN(4),
  MOBILE_HIPRI(5),
  WIMAX(6),
  BLUETOOTH(7),
  DUMMY(8),
  ETHERNET(9),
  VPN(10);

  companion object {
    fun ofRaw(raw: Int): NetworkTypeApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class NetworkCapabilityApi(val raw: Int) {
  MMS(0),
  SUPL(1),
  DUN(2),
  FOTA(3),
  IMS(4),
  CBS(5),
  WIFI_P2P(6),
  IA(7),
  RCS(8),
  XCAP(9),
  EIMS(10),
  NOT_METERED(11),
  INTERNET(12),
  NOT_RESTRICTED(13),
  TRUSTED(14),
  NOT_VPN(15),
  VALIDATED(16),
  CAPTIVE_PORTAL(17),
  NOT_ROAMING(18),
  FOREGROUND(19),
  NOT_CONGESTED(20),
  NOT_SUSPENDED(21),
  MCX(22),
  TEMPORARILY_NOT_METERED(23),
  ENTERPRISE(24),
  HEAD_UNIT(25),
  MMTEL(26),
  PRIORITIZE_LATENCY(27),
  PRIORITIZE_BANDWIDTH(28),
  LOCAL_NETWORK(29),
  NOT_BANDWIDTH_CONSTRAINED(30);

  companion object {
    fun ofRaw(raw: Int): NetworkCapabilityApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class TransportTypeApi(val raw: Int) {
  CELLULAR(0),
  WIFI(1),
  BLUETOOTH(2),
  ETHERNET(3),
  VPN(4),
  WIFI_AWARE(5),
  LOWPAN(6),
  USB(7),
  THREAD(8),
  SATELLITE(9);

  companion object {
    fun ofRaw(raw: Int): TransportTypeApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class RouteTypeApi(val raw: Int) {
  UNICAST(0),
  UNREACHABLE(1),
  THROWS(2);

  companion object {
    fun ofRaw(raw: Int): RouteTypeApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class RestrictBackgroundStatusApi(val raw: Int) {
  DISABLED(0),
  WHITELISTED(1),
  ENABLED(2);

  companion object {
    fun ofRaw(raw: Int): RestrictBackgroundStatusApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ConnectivityManagerNetworkCallbackFlagApi(val raw: Int) {
  INCLUDE_LOCATION_INFO(0);

  companion object {
    fun ofRaw(raw: Int): ConnectivityManagerNetworkCallbackFlagApi? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}
private open class ConnectivityManagerApiPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          NetworkTypeApi.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          NetworkCapabilityApi.ofRaw(it.toInt())
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          TransportTypeApi.ofRaw(it.toInt())
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          RouteTypeApi.ofRaw(it.toInt())
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          RestrictBackgroundStatusApi.ofRaw(it.toInt())
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ConnectivityManagerNetworkCallbackFlagApi.ofRaw(it.toInt())
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is NetworkTypeApi -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is NetworkCapabilityApi -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      is TransportTypeApi -> {
        stream.write(131)
        writeValue(stream, value.raw)
      }
      is RouteTypeApi -> {
        stream.write(132)
        writeValue(stream, value.raw)
      }
      is RestrictBackgroundStatusApi -> {
        stream.write(133)
        writeValue(stream, value.raw)
      }
      is ConnectivityManagerNetworkCallbackFlagApi -> {
        stream.write(134)
        writeValue(stream, value.raw)
      }
      else -> super.writeValue(stream, value)
    }
  }
}

@Suppress("UNCHECKED_CAST")
abstract class PigeonApiConnectivityManagerProxyApi(open val pigeonRegistrar: ConnectivityManagerApiPigeonProxyApiRegistrar) {
  abstract fun instance(): android.net.ConnectivityManager

  abstract fun getProcessDefaultNetwork(): android.net.Network?

  abstract fun isNetworkTypeValid(networkType: NetworkTypeApi): Boolean

  abstract fun setProcessDefaultNetwork(network: android.net.Network): Boolean

  abstract fun addDefaultNetworkActiveListener(pigeon_instance: android.net.ConnectivityManager, listener: android.net.ConnectivityManager.OnNetworkActiveListener)

  abstract fun removeDefaultNetworkActiveListener(pigeon_instance: android.net.ConnectivityManager, listener: android.net.ConnectivityManager.OnNetworkActiveListener)

  abstract fun registerBestMatchingNetworkCallback(pigeon_instance: android.net.ConnectivityManager, request: android.net.NetworkRequest, networkCallback: android.net.ConnectivityManager.NetworkCallback)

  abstract fun registerDefaultNetworkCallback(pigeon_instance: android.net.ConnectivityManager, networkCallback: android.net.ConnectivityManager.NetworkCallback)

  abstract fun registerNetworkCallback(pigeon_instance: android.net.ConnectivityManager, request: android.net.NetworkRequest, networkCallback: android.net.ConnectivityManager.NetworkCallback)

  abstract fun unregisterNetworkCallback(pigeon_instance: android.net.ConnectivityManager, networkCallback: android.net.ConnectivityManager.NetworkCallback)

  abstract fun bindProcessToNetwork(pigeon_instance: android.net.ConnectivityManager, network: android.net.Network): Boolean

  @androidx.annotation.RequiresApi(api = 29)
  abstract fun createSocketKeepalive(pigeon_instance: android.net.ConnectivityManager, network: android.net.Network, socket: android.net.IpSecManager.UdpEncapsulationSocket, source: java.net.InetAddress, destination: java.net.InetAddress, callback: android.net.SocketKeepalive.Callback): android.net.SocketKeepalive

  abstract fun getActiveNetwork(pigeon_instance: android.net.ConnectivityManager): android.net.Network?

  abstract fun getActiveNetworkInfo(pigeon_instance: android.net.ConnectivityManager): android.net.NetworkInfo?

  abstract fun getAllNetworkInfo(pigeon_instance: android.net.ConnectivityManager): List<android.net.NetworkInfo>

  abstract fun getAllNetworks(pigeon_instance: android.net.ConnectivityManager): List<android.net.Network>

  abstract fun getBackgroundDataSetting(pigeon_instance: android.net.ConnectivityManager): Boolean

  abstract fun getBoundNetworkForProcess(pigeon_instance: android.net.ConnectivityManager): android.net.Network?

  abstract fun getConnectionOwnerUid(pigeon_instance: android.net.ConnectivityManager, protocol: Long, local: java.net.InetSocketAddress, remote: java.net.InetSocketAddress): Long

  abstract fun getDefaultProxy(pigeon_instance: android.net.ConnectivityManager): android.net.ProxyInfo?

  abstract fun getLinkProperties(pigeon_instance: android.net.ConnectivityManager, network: android.net.Network): android.net.LinkProperties?

  abstract fun getMultipathPreference(pigeon_instance: android.net.ConnectivityManager, network: android.net.Network): Long

  abstract fun getNetworkCapabilities(pigeon_instance: android.net.ConnectivityManager, network: android.net.Network): android.net.NetworkCapabilities?

  abstract fun getNetworkInfo1(pigeon_instance: android.net.ConnectivityManager, networkType: NetworkTypeApi): android.net.NetworkInfo?

  abstract fun getNetworkInfo2(pigeon_instance: android.net.ConnectivityManager, network: android.net.Network): android.net.NetworkInfo?

  abstract fun getNetworkPreference(pigeon_instance: android.net.ConnectivityManager): Long

  abstract fun getNetworkWatchlistConfigHash(pigeon_instance: android.net.ConnectivityManager): ByteArray?

  abstract fun getRestrictBackgroundStatus(pigeon_instance: android.net.ConnectivityManager): RestrictBackgroundStatusApi

  abstract fun isActiveNetworkMetered(pigeon_instance: android.net.ConnectivityManager): Boolean

  abstract fun isDefaultNetworkActive(pigeon_instance: android.net.ConnectivityManager): Boolean

  abstract fun reportBadNetwork(pigeon_instance: android.net.ConnectivityManager, network: android.net.Network)

  abstract fun reportNetworkConnectivity(pigeon_instance: android.net.ConnectivityManager, network: android.net.Network, hasConnectivity: Boolean)

  abstract fun requestBandwidthUpdate(pigeon_instance: android.net.ConnectivityManager, network: android.net.Network): Boolean

  abstract fun requestNetwork(pigeon_instance: android.net.ConnectivityManager, request: android.net.NetworkRequest, networkCallback: android.net.ConnectivityManager.NetworkCallback, timeoutMs: Long?)

  abstract fun reserveNetwork(pigeon_instance: android.net.ConnectivityManager, request: android.net.NetworkRequest, networkCallback: android.net.ConnectivityManager.NetworkCallback)

  abstract fun setNetworkPreference(pigeon_instance: android.net.ConnectivityManager, preference: Long)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiConnectivityManagerProxyApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: ConnectivityManagerApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.instance", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.instance(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.getProcessDefaultNetwork", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getProcessDefaultNetwork())
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.isNetworkTypeValid", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val networkTypeArg = args[0] as NetworkTypeApi
            val wrapped: List<Any?> = try {
              listOf(api.isNetworkTypeValid(networkTypeArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.setProcessDefaultNetwork", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val networkArg = args[0] as android.net.Network
            val wrapped: List<Any?> = try {
              listOf(api.setProcessDefaultNetwork(networkArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.addDefaultNetworkActiveListener", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val listenerArg = args[1] as android.net.ConnectivityManager.OnNetworkActiveListener
            val wrapped: List<Any?> = try {
              api.addDefaultNetworkActiveListener(pigeon_instanceArg, listenerArg)
              listOf(null)
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.removeDefaultNetworkActiveListener", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val listenerArg = args[1] as android.net.ConnectivityManager.OnNetworkActiveListener
            val wrapped: List<Any?> = try {
              api.removeDefaultNetworkActiveListener(pigeon_instanceArg, listenerArg)
              listOf(null)
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.registerBestMatchingNetworkCallback", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val requestArg = args[1] as android.net.NetworkRequest
            val networkCallbackArg = args[2] as android.net.ConnectivityManager.NetworkCallback
            val wrapped: List<Any?> = try {
              api.registerBestMatchingNetworkCallback(pigeon_instanceArg, requestArg, networkCallbackArg)
              listOf(null)
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.registerDefaultNetworkCallback", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val networkCallbackArg = args[1] as android.net.ConnectivityManager.NetworkCallback
            val wrapped: List<Any?> = try {
              api.registerDefaultNetworkCallback(pigeon_instanceArg, networkCallbackArg)
              listOf(null)
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.registerNetworkCallback", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val requestArg = args[1] as android.net.NetworkRequest
            val networkCallbackArg = args[2] as android.net.ConnectivityManager.NetworkCallback
            val wrapped: List<Any?> = try {
              api.registerNetworkCallback(pigeon_instanceArg, requestArg, networkCallbackArg)
              listOf(null)
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.unregisterNetworkCallback", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val networkCallbackArg = args[1] as android.net.ConnectivityManager.NetworkCallback
            val wrapped: List<Any?> = try {
              api.unregisterNetworkCallback(pigeon_instanceArg, networkCallbackArg)
              listOf(null)
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.bindProcessToNetwork", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val networkArg = args[1] as android.net.Network
            val wrapped: List<Any?> = try {
              listOf(api.bindProcessToNetwork(pigeon_instanceArg, networkArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      if (android.os.Build.VERSION.SDK_INT >= 29) {
        run {
          val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.createSocketKeepalive", codec)
          if (api != null) {
            channel.setMessageHandler { message, reply ->
              val args = message as List<Any?>
              val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
              val networkArg = args[1] as android.net.Network
              val socketArg = args[2] as android.net.IpSecManager.UdpEncapsulationSocket
              val sourceArg = args[3] as java.net.InetAddress
              val destinationArg = args[4] as java.net.InetAddress
              val callbackArg = args[5] as android.net.SocketKeepalive.Callback
              val wrapped: List<Any?> = try {
                listOf(api.createSocketKeepalive(pigeon_instanceArg, networkArg, socketArg, sourceArg, destinationArg, callbackArg))
              } catch (exception: Throwable) {
                ConnectivityManagerApiPigeonUtils.wrapError(exception)
              }
              reply.reply(wrapped)
            }
          } else {
            channel.setMessageHandler(null)
          }
        }
      }       else {
        val channel = BasicMessageChannel<Any?>(
          binaryMessenger,
          "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.createSocketKeepalive",
          codec
        )
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            reply.reply(ConnectivityManagerApiPigeonUtils.wrapError(UnsupportedOperationException(
              "Call references class `android.net.SocketKeepalive.Callback`, which requires api version 29."
            )))
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.getActiveNetwork", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val wrapped: List<Any?> = try {
              listOf(api.getActiveNetwork(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.getActiveNetworkInfo", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val wrapped: List<Any?> = try {
              listOf(api.getActiveNetworkInfo(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.getAllNetworkInfo", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val wrapped: List<Any?> = try {
              listOf(api.getAllNetworkInfo(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.getAllNetworks", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val wrapped: List<Any?> = try {
              listOf(api.getAllNetworks(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.getBackgroundDataSetting", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val wrapped: List<Any?> = try {
              listOf(api.getBackgroundDataSetting(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.getBoundNetworkForProcess", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val wrapped: List<Any?> = try {
              listOf(api.getBoundNetworkForProcess(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.getConnectionOwnerUid", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val protocolArg = args[1] as Long
            val localArg = args[2] as java.net.InetSocketAddress
            val remoteArg = args[3] as java.net.InetSocketAddress
            val wrapped: List<Any?> = try {
              listOf(api.getConnectionOwnerUid(pigeon_instanceArg, protocolArg, localArg, remoteArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.getDefaultProxy", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val wrapped: List<Any?> = try {
              listOf(api.getDefaultProxy(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.getLinkProperties", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val networkArg = args[1] as android.net.Network
            val wrapped: List<Any?> = try {
              listOf(api.getLinkProperties(pigeon_instanceArg, networkArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.getMultipathPreference", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val networkArg = args[1] as android.net.Network
            val wrapped: List<Any?> = try {
              listOf(api.getMultipathPreference(pigeon_instanceArg, networkArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.getNetworkCapabilities", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val networkArg = args[1] as android.net.Network
            val wrapped: List<Any?> = try {
              listOf(api.getNetworkCapabilities(pigeon_instanceArg, networkArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.getNetworkInfo1", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val networkTypeArg = args[1] as NetworkTypeApi
            val wrapped: List<Any?> = try {
              listOf(api.getNetworkInfo1(pigeon_instanceArg, networkTypeArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.getNetworkInfo2", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val networkArg = args[1] as android.net.Network
            val wrapped: List<Any?> = try {
              listOf(api.getNetworkInfo2(pigeon_instanceArg, networkArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.getNetworkPreference", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val wrapped: List<Any?> = try {
              listOf(api.getNetworkPreference(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.getNetworkWatchlistConfigHash", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val wrapped: List<Any?> = try {
              listOf(api.getNetworkWatchlistConfigHash(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.getRestrictBackgroundStatus", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val wrapped: List<Any?> = try {
              listOf(api.getRestrictBackgroundStatus(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.isActiveNetworkMetered", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val wrapped: List<Any?> = try {
              listOf(api.isActiveNetworkMetered(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.isDefaultNetworkActive", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val wrapped: List<Any?> = try {
              listOf(api.isDefaultNetworkActive(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.reportBadNetwork", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val networkArg = args[1] as android.net.Network
            val wrapped: List<Any?> = try {
              api.reportBadNetwork(pigeon_instanceArg, networkArg)
              listOf(null)
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.reportNetworkConnectivity", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val networkArg = args[1] as android.net.Network
            val hasConnectivityArg = args[2] as Boolean
            val wrapped: List<Any?> = try {
              api.reportNetworkConnectivity(pigeon_instanceArg, networkArg, hasConnectivityArg)
              listOf(null)
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.requestBandwidthUpdate", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val networkArg = args[1] as android.net.Network
            val wrapped: List<Any?> = try {
              listOf(api.requestBandwidthUpdate(pigeon_instanceArg, networkArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.requestNetwork", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val requestArg = args[1] as android.net.NetworkRequest
            val networkCallbackArg = args[2] as android.net.ConnectivityManager.NetworkCallback
            val timeoutMsArg = args[3] as Long?
            val wrapped: List<Any?> = try {
              api.requestNetwork(pigeon_instanceArg, requestArg, networkCallbackArg, timeoutMsArg)
              listOf(null)
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.reserveNetwork", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val requestArg = args[1] as android.net.NetworkRequest
            val networkCallbackArg = args[2] as android.net.ConnectivityManager.NetworkCallback
            val wrapped: List<Any?> = try {
              api.reserveNetwork(pigeon_instanceArg, requestArg, networkCallbackArg)
              listOf(null)
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.setNetworkPreference", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.ConnectivityManager
            val preferenceArg = args[1] as Long
            val wrapped: List<Any?> = try {
              api.setNetworkPreference(pigeon_instanceArg, preferenceArg)
              listOf(null)
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ConnectivityManagerProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.net.ConnectivityManager, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiConnectivityManagerNetworkCallbackProxyApi(open val pigeonRegistrar: ConnectivityManagerApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): android.net.ConnectivityManager.NetworkCallback

  abstract fun flags(flags: List<ConnectivityManagerNetworkCallbackFlagApi>): android.net.ConnectivityManager.NetworkCallback

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiConnectivityManagerNetworkCallbackProxyApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: ConnectivityManagerApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerNetworkCallbackProxyApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerNetworkCallbackProxyApi.flags", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val flagsArg = args[1] as List<ConnectivityManagerNetworkCallbackFlagApi>
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.flags(flagsArg), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ConnectivityManagerNetworkCallbackProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.net.ConnectivityManager.NetworkCallback, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      callback(
          Result.failure(
              ConnectivityManagerError("new-instance-error", "Attempting to create a new Dart instance of ConnectivityManagerNetworkCallbackProxyApi, but the class has a nonnull callback method.", "")))
    }
  }

  fun onAvailable(pigeon_instanceArg: android.net.ConnectivityManager.NetworkCallback, networkArg: android.net.Network, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerNetworkCallbackProxyApi.onAvailable"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, networkArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }

  fun onBlockedStatusChanged(pigeon_instanceArg: android.net.ConnectivityManager.NetworkCallback, networkArg: android.net.Network, blockedArg: Boolean, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerNetworkCallbackProxyApi.onBlockedStatusChanged"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, networkArg, blockedArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }

  fun onCapabilitiesChanged(pigeon_instanceArg: android.net.ConnectivityManager.NetworkCallback, networkArg: android.net.Network, networkCapabilitiesArg: android.net.NetworkCapabilities, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerNetworkCallbackProxyApi.onCapabilitiesChanged"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, networkArg, networkCapabilitiesArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }

  fun onLinkPropertiesChanged(pigeon_instanceArg: android.net.ConnectivityManager.NetworkCallback, networkArg: android.net.Network, linkPropertiesArg: android.net.LinkProperties, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerNetworkCallbackProxyApi.onLinkPropertiesChanged"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, networkArg, linkPropertiesArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }

  fun onLosing(pigeon_instanceArg: android.net.ConnectivityManager.NetworkCallback, networkArg: android.net.Network, maxMsToLiveArg: Long, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerNetworkCallbackProxyApi.onLosing"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, networkArg, maxMsToLiveArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }

  fun onLost(pigeon_instanceArg: android.net.ConnectivityManager.NetworkCallback, networkArg: android.net.Network, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerNetworkCallbackProxyApi.onLost"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, networkArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }

  fun onReserved(pigeon_instanceArg: android.net.ConnectivityManager.NetworkCallback, networkCapabilitiesArg: android.net.NetworkCapabilities, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerNetworkCallbackProxyApi.onReserved"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, networkCapabilitiesArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }

  fun onUnavailable(pigeon_instanceArg: android.net.ConnectivityManager.NetworkCallback, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerNetworkCallbackProxyApi.onUnavailable"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiConnectivityManagerOnNetworkActiveListenerProxyApi(open val pigeonRegistrar: ConnectivityManagerApiPigeonProxyApiRegistrar) {
  abstract fun pigeon_defaultConstructor(): android.net.ConnectivityManager.OnNetworkActiveListener

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiConnectivityManagerOnNetworkActiveListenerProxyApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: ConnectivityManagerApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerOnNetworkActiveListenerProxyApi.pigeon_defaultConstructor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> = try {
              api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(), pigeon_identifierArg)
              listOf(null)
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ConnectivityManagerOnNetworkActiveListenerProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.net.ConnectivityManager.OnNetworkActiveListener, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      callback(
          Result.failure(
              ConnectivityManagerError("new-instance-error", "Attempting to create a new Dart instance of ConnectivityManagerOnNetworkActiveListenerProxyApi, but the class has a nonnull callback method.", "")))
    }
  }

  fun onNetworkActive(pigeon_instanceArg: android.net.ConnectivityManager.OnNetworkActiveListener, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.connectivity_manager.ConnectivityManagerOnNetworkActiveListenerProxyApi.onNetworkActive"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiNetworkProxyApi(open val pigeonRegistrar: ConnectivityManagerApiPigeonProxyApiRegistrar) {
  abstract fun fromNetworkHandle(networkHandle: Long): android.net.Network

  abstract fun bindSocket1(pigeon_instance: android.net.Network, socket: java.net.Socket)

  abstract fun bindSocket2(pigeon_instance: android.net.Network, socket: java.net.DatagramSocket)

  abstract fun bindSocket3(pigeon_instance: android.net.Network, fd: java.io.FileDescriptor)

  abstract fun getAllByName(pigeon_instance: android.net.Network, host: String): List<java.net.InetAddress>

  abstract fun getByName(pigeon_instance: android.net.Network, host: String): java.net.InetAddress

  abstract fun getNetworkHandle(pigeon_instance: android.net.Network): Long

  abstract fun getSocketFatory(pigeon_instance: android.net.Network): javax.net.SocketFactory

  abstract fun openConnection(pigeon_instance: android.net.Network, url: java.net.URL, proxy: java.net.Proxy?): java.net.URLConnection

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiNetworkProxyApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: ConnectivityManagerApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.NetworkProxyApi.fromNetworkHandle", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val networkHandleArg = args[0] as Long
            val wrapped: List<Any?> = try {
              listOf(api.fromNetworkHandle(networkHandleArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.NetworkProxyApi.bindSocket1", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.Network
            val socketArg = args[1] as java.net.Socket
            val wrapped: List<Any?> = try {
              api.bindSocket1(pigeon_instanceArg, socketArg)
              listOf(null)
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.NetworkProxyApi.bindSocket2", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.Network
            val socketArg = args[1] as java.net.DatagramSocket
            val wrapped: List<Any?> = try {
              api.bindSocket2(pigeon_instanceArg, socketArg)
              listOf(null)
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.NetworkProxyApi.bindSocket3", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.Network
            val fdArg = args[1] as java.io.FileDescriptor
            val wrapped: List<Any?> = try {
              api.bindSocket3(pigeon_instanceArg, fdArg)
              listOf(null)
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.NetworkProxyApi.getAllByName", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.Network
            val hostArg = args[1] as String
            val wrapped: List<Any?> = try {
              listOf(api.getAllByName(pigeon_instanceArg, hostArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.NetworkProxyApi.getByName", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.Network
            val hostArg = args[1] as String
            val wrapped: List<Any?> = try {
              listOf(api.getByName(pigeon_instanceArg, hostArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.NetworkProxyApi.getNetworkHandle", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.Network
            val wrapped: List<Any?> = try {
              listOf(api.getNetworkHandle(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.NetworkProxyApi.getSocketFatory", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.Network
            val wrapped: List<Any?> = try {
              listOf(api.getSocketFatory(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.NetworkProxyApi.openConnection", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.Network
            val urlArg = args[1] as java.net.URL
            val proxyArg = args[2] as java.net.Proxy?
            val wrapped: List<Any?> = try {
              listOf(api.openConnection(pigeon_instanceArg, urlArg, proxyArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of NetworkProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.net.Network, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.connectivity_manager.NetworkProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiNetworkInfoProxyApi(open val pigeonRegistrar: ConnectivityManagerApiPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of NetworkInfoProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.net.NetworkInfo, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.connectivity_manager.NetworkInfoProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiNetworkRequestProxyApi(open val pigeonRegistrar: ConnectivityManagerApiPigeonProxyApiRegistrar) {
  @androidx.annotation.RequiresApi(api = 26)
  abstract fun pigeon_defaultConstructor(capabilities: List<NetworkCapabilityApi>?, transportTypes: List<TransportTypeApi>?, includeOtherUidNetworks: Boolean?, networkSpecifier: android.net.NetworkSpecifier?, subIds: List<Long>?): android.net.NetworkRequest

  abstract fun canBeSatisfiedBy(pigeon_instance: android.net.NetworkRequest, nc: android.net.NetworkCapabilities): Boolean

  abstract fun getCapabilities(pigeon_instance: android.net.NetworkRequest): List<NetworkCapabilityApi>

  @androidx.annotation.RequiresApi(api = 26)
  abstract fun getNetworkSpecifier(pigeon_instance: android.net.NetworkRequest): android.net.NetworkSpecifier?

  abstract fun getSubscriptionIds(pigeon_instance: android.net.NetworkRequest): List<Long>

  abstract fun getTransportTypes(pigeon_instance: android.net.NetworkRequest): List<TransportTypeApi>

  abstract fun hasCapability(pigeon_instance: android.net.NetworkRequest, capability: NetworkCapabilityApi): Boolean

  abstract fun hasTransport(pigeon_instance: android.net.NetworkRequest, transportType: TransportTypeApi): Boolean

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiNetworkRequestProxyApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: ConnectivityManagerApiPigeonCodec()
      if (android.os.Build.VERSION.SDK_INT >= 26) {
        run {
          val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.NetworkRequestProxyApi.pigeon_defaultConstructor", codec)
          if (api != null) {
            channel.setMessageHandler { message, reply ->
              val args = message as List<Any?>
              val pigeon_identifierArg = args[0] as Long
              val capabilitiesArg = args[1] as List<NetworkCapabilityApi>?
              val transportTypesArg = args[2] as List<TransportTypeApi>?
              val includeOtherUidNetworksArg = args[3] as Boolean?
              val networkSpecifierArg = args[4] as android.net.NetworkSpecifier?
              val subIdsArg = args[5] as List<Long>?
              val wrapped: List<Any?> = try {
                api.pigeonRegistrar.instanceManager.addDartCreatedInstance(api.pigeon_defaultConstructor(capabilitiesArg,transportTypesArg,includeOtherUidNetworksArg,networkSpecifierArg,subIdsArg), pigeon_identifierArg)
                listOf(null)
              } catch (exception: Throwable) {
                ConnectivityManagerApiPigeonUtils.wrapError(exception)
              }
              reply.reply(wrapped)
            }
          } else {
            channel.setMessageHandler(null)
          }
        }
      }       else {
        val channel = BasicMessageChannel<Any?>(
          binaryMessenger,
          "dev.flutter.pigeon.connectivity_manager.NetworkRequestProxyApi.pigeon_defaultConstructor",
          codec
        )
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            reply.reply(ConnectivityManagerApiPigeonUtils.wrapError(UnsupportedOperationException(
              "Call references class `android.net.NetworkSpecifier`, which requires api version 26."
            )))
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.NetworkRequestProxyApi.canBeSatisfiedBy", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.NetworkRequest
            val ncArg = args[1] as android.net.NetworkCapabilities
            val wrapped: List<Any?> = try {
              listOf(api.canBeSatisfiedBy(pigeon_instanceArg, ncArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.NetworkRequestProxyApi.getCapabilities", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.NetworkRequest
            val wrapped: List<Any?> = try {
              listOf(api.getCapabilities(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      if (android.os.Build.VERSION.SDK_INT >= 26) {
        run {
          val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.NetworkRequestProxyApi.getNetworkSpecifier", codec)
          if (api != null) {
            channel.setMessageHandler { message, reply ->
              val args = message as List<Any?>
              val pigeon_instanceArg = args[0] as android.net.NetworkRequest
              val wrapped: List<Any?> = try {
                listOf(api.getNetworkSpecifier(pigeon_instanceArg))
              } catch (exception: Throwable) {
                ConnectivityManagerApiPigeonUtils.wrapError(exception)
              }
              reply.reply(wrapped)
            }
          } else {
            channel.setMessageHandler(null)
          }
        }
      }       else {
        val channel = BasicMessageChannel<Any?>(
          binaryMessenger,
          "dev.flutter.pigeon.connectivity_manager.NetworkRequestProxyApi.getNetworkSpecifier",
          codec
        )
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            reply.reply(ConnectivityManagerApiPigeonUtils.wrapError(UnsupportedOperationException(
              "Call references class `android.net.NetworkSpecifier`, which requires api version 26."
            )))
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.NetworkRequestProxyApi.getSubscriptionIds", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.NetworkRequest
            val wrapped: List<Any?> = try {
              listOf(api.getSubscriptionIds(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.NetworkRequestProxyApi.getTransportTypes", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.NetworkRequest
            val wrapped: List<Any?> = try {
              listOf(api.getTransportTypes(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.NetworkRequestProxyApi.hasCapability", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.NetworkRequest
            val capabilityArg = args[1] as NetworkCapabilityApi
            val wrapped: List<Any?> = try {
              listOf(api.hasCapability(pigeon_instanceArg, capabilityArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.NetworkRequestProxyApi.hasTransport", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.NetworkRequest
            val transportTypeArg = args[1] as TransportTypeApi
            val wrapped: List<Any?> = try {
              listOf(api.hasTransport(pigeon_instanceArg, transportTypeArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of NetworkRequestProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.net.NetworkRequest, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.connectivity_manager.NetworkRequestProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiNetworkCapabilitiesProxyApi(open val pigeonRegistrar: ConnectivityManagerApiPigeonProxyApiRegistrar) {
  abstract fun getCapabilities(pigeon_instance: android.net.NetworkCapabilities): List<NetworkCapabilityApi>

  abstract fun getEnterpriseIds(pigeon_instance: android.net.NetworkCapabilities): List<Long>

  abstract fun getLinkDownstreamBandwidthKbps(pigeon_instance: android.net.NetworkCapabilities): Long

  abstract fun getLinkUpstreamBandwidthKbps(pigeon_instance: android.net.NetworkCapabilities): Long

  @androidx.annotation.RequiresApi(api = 26)
  abstract fun getNetworkSpecifier(pigeon_instance: android.net.NetworkCapabilities): android.net.NetworkSpecifier?

  abstract fun getOwnerUid(pigeon_instance: android.net.NetworkCapabilities): Long

  abstract fun getSignalStrength(pigeon_instance: android.net.NetworkCapabilities): Long

  abstract fun getSubscriptionIds(pigeon_instance: android.net.NetworkCapabilities): List<Long>

  @androidx.annotation.RequiresApi(api = 29)
  abstract fun getTransportInfo(pigeon_instance: android.net.NetworkCapabilities): android.net.TransportInfo?

  abstract fun hasCapability(pigeon_instance: android.net.NetworkCapabilities, capability: NetworkCapabilityApi): Boolean

  abstract fun hasEnterpriseId(pigeon_instance: android.net.NetworkCapabilities, enterpriseId: Long): Boolean

  abstract fun hasTransport(pigeon_instance: android.net.NetworkCapabilities, transportType: TransportTypeApi): Boolean

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiNetworkCapabilitiesProxyApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: ConnectivityManagerApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.NetworkCapabilitiesProxyApi.getCapabilities", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.NetworkCapabilities
            val wrapped: List<Any?> = try {
              listOf(api.getCapabilities(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.NetworkCapabilitiesProxyApi.getEnterpriseIds", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.NetworkCapabilities
            val wrapped: List<Any?> = try {
              listOf(api.getEnterpriseIds(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.NetworkCapabilitiesProxyApi.getLinkDownstreamBandwidthKbps", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.NetworkCapabilities
            val wrapped: List<Any?> = try {
              listOf(api.getLinkDownstreamBandwidthKbps(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.NetworkCapabilitiesProxyApi.getLinkUpstreamBandwidthKbps", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.NetworkCapabilities
            val wrapped: List<Any?> = try {
              listOf(api.getLinkUpstreamBandwidthKbps(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      if (android.os.Build.VERSION.SDK_INT >= 26) {
        run {
          val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.NetworkCapabilitiesProxyApi.getNetworkSpecifier", codec)
          if (api != null) {
            channel.setMessageHandler { message, reply ->
              val args = message as List<Any?>
              val pigeon_instanceArg = args[0] as android.net.NetworkCapabilities
              val wrapped: List<Any?> = try {
                listOf(api.getNetworkSpecifier(pigeon_instanceArg))
              } catch (exception: Throwable) {
                ConnectivityManagerApiPigeonUtils.wrapError(exception)
              }
              reply.reply(wrapped)
            }
          } else {
            channel.setMessageHandler(null)
          }
        }
      }       else {
        val channel = BasicMessageChannel<Any?>(
          binaryMessenger,
          "dev.flutter.pigeon.connectivity_manager.NetworkCapabilitiesProxyApi.getNetworkSpecifier",
          codec
        )
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            reply.reply(ConnectivityManagerApiPigeonUtils.wrapError(UnsupportedOperationException(
              "Call references class `android.net.NetworkSpecifier`, which requires api version 26."
            )))
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.NetworkCapabilitiesProxyApi.getOwnerUid", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.NetworkCapabilities
            val wrapped: List<Any?> = try {
              listOf(api.getOwnerUid(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.NetworkCapabilitiesProxyApi.getSignalStrength", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.NetworkCapabilities
            val wrapped: List<Any?> = try {
              listOf(api.getSignalStrength(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.NetworkCapabilitiesProxyApi.getSubscriptionIds", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.NetworkCapabilities
            val wrapped: List<Any?> = try {
              listOf(api.getSubscriptionIds(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      if (android.os.Build.VERSION.SDK_INT >= 29) {
        run {
          val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.NetworkCapabilitiesProxyApi.getTransportInfo", codec)
          if (api != null) {
            channel.setMessageHandler { message, reply ->
              val args = message as List<Any?>
              val pigeon_instanceArg = args[0] as android.net.NetworkCapabilities
              val wrapped: List<Any?> = try {
                listOf(api.getTransportInfo(pigeon_instanceArg))
              } catch (exception: Throwable) {
                ConnectivityManagerApiPigeonUtils.wrapError(exception)
              }
              reply.reply(wrapped)
            }
          } else {
            channel.setMessageHandler(null)
          }
        }
      }       else {
        val channel = BasicMessageChannel<Any?>(
          binaryMessenger,
          "dev.flutter.pigeon.connectivity_manager.NetworkCapabilitiesProxyApi.getTransportInfo",
          codec
        )
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            reply.reply(ConnectivityManagerApiPigeonUtils.wrapError(UnsupportedOperationException(
              "Call references class `android.net.TransportInfo`, which requires api version 29."
            )))
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.NetworkCapabilitiesProxyApi.hasCapability", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.NetworkCapabilities
            val capabilityArg = args[1] as NetworkCapabilityApi
            val wrapped: List<Any?> = try {
              listOf(api.hasCapability(pigeon_instanceArg, capabilityArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.NetworkCapabilitiesProxyApi.hasEnterpriseId", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.NetworkCapabilities
            val enterpriseIdArg = args[1] as Long
            val wrapped: List<Any?> = try {
              listOf(api.hasEnterpriseId(pigeon_instanceArg, enterpriseIdArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.NetworkCapabilitiesProxyApi.hasTransport", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.NetworkCapabilities
            val transportTypeArg = args[1] as TransportTypeApi
            val wrapped: List<Any?> = try {
              listOf(api.hasTransport(pigeon_instanceArg, transportTypeArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of NetworkCapabilitiesProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.net.NetworkCapabilities, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.connectivity_manager.NetworkCapabilitiesProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiNetworkSpecifierProxyApi(open val pigeonRegistrar: ConnectivityManagerApiPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of NetworkSpecifierProxyApi and attaches it to [pigeon_instanceArg]. */
  @androidx.annotation.RequiresApi(api = 26)
  fun pigeon_newInstance(pigeon_instanceArg: android.net.NetworkSpecifier, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.connectivity_manager.NetworkSpecifierProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiLinkPropertiesProxyApi(open val pigeonRegistrar: ConnectivityManagerApiPigeonProxyApiRegistrar) {
  abstract fun addRoute(pigeon_instance: android.net.LinkProperties, route: android.net.RouteInfo): Boolean

  abstract fun clear(pigeon_instance: android.net.LinkProperties)

  abstract fun getDhcpServerAddress(pigeon_instance: android.net.LinkProperties): java.net.Inet4Address?

  abstract fun getDnsServers(pigeon_instance: android.net.LinkProperties): List<java.net.InetAddress>

  abstract fun getDomains(pigeon_instance: android.net.LinkProperties): String?

  abstract fun getHttpProxy(pigeon_instance: android.net.LinkProperties): android.net.ProxyInfo?

  abstract fun getInterfaceName(pigeon_instance: android.net.LinkProperties): String?

  abstract fun getLinkAddresses(pigeon_instance: android.net.LinkProperties): List<android.net.LinkAddress>

  abstract fun getMtu(pigeon_instance: android.net.LinkProperties): Long

  abstract fun getNat64Prefix(pigeon_instance: android.net.LinkProperties): android.net.IpPrefix?

  abstract fun getPrivateDnsServerName(pigeon_instance: android.net.LinkProperties): String?

  abstract fun getRoutes(pigeon_instance: android.net.LinkProperties): List<android.net.RouteInfo>

  abstract fun isPrivateDnsActive(pigeon_instance: android.net.LinkProperties): Boolean

  abstract fun isWakeOnLanSupported(pigeon_instance: android.net.LinkProperties): Boolean

  abstract fun setDhcpServerAddress(pigeon_instance: android.net.LinkProperties, serverAddress: java.net.Inet4Address?)

  abstract fun setDnsServers(pigeon_instance: android.net.LinkProperties, dnsServers: List<java.net.InetAddress>)

  abstract fun setDomains(pigeon_instance: android.net.LinkProperties, domains: String?)

  abstract fun setHttpProxy(pigeon_instance: android.net.LinkProperties, proxy: android.net.ProxyInfo?)

  abstract fun setInterfaceName(pigeon_instance: android.net.LinkProperties, iface: String?)

  abstract fun setLinkAddresses(pigeon_instance: android.net.LinkProperties, addresses: List<android.net.LinkAddress>)

  abstract fun setMtu(pigeon_instance: android.net.LinkProperties, mtu: Long)

  abstract fun setNat64Prefix(pigeon_instance: android.net.LinkProperties, prefix: android.net.IpPrefix?)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiLinkPropertiesProxyApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: ConnectivityManagerApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.LinkPropertiesProxyApi.addRoute", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkProperties
            val routeArg = args[1] as android.net.RouteInfo
            val wrapped: List<Any?> = try {
              listOf(api.addRoute(pigeon_instanceArg, routeArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.LinkPropertiesProxyApi.clear", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkProperties
            val wrapped: List<Any?> = try {
              api.clear(pigeon_instanceArg)
              listOf(null)
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.LinkPropertiesProxyApi.getDhcpServerAddress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkProperties
            val wrapped: List<Any?> = try {
              listOf(api.getDhcpServerAddress(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.LinkPropertiesProxyApi.getDnsServers", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkProperties
            val wrapped: List<Any?> = try {
              listOf(api.getDnsServers(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.LinkPropertiesProxyApi.getDomains", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkProperties
            val wrapped: List<Any?> = try {
              listOf(api.getDomains(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.LinkPropertiesProxyApi.getHttpProxy", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkProperties
            val wrapped: List<Any?> = try {
              listOf(api.getHttpProxy(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.LinkPropertiesProxyApi.getInterfaceName", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkProperties
            val wrapped: List<Any?> = try {
              listOf(api.getInterfaceName(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.LinkPropertiesProxyApi.getLinkAddresses", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkProperties
            val wrapped: List<Any?> = try {
              listOf(api.getLinkAddresses(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.LinkPropertiesProxyApi.getMtu", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkProperties
            val wrapped: List<Any?> = try {
              listOf(api.getMtu(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.LinkPropertiesProxyApi.getNat64Prefix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkProperties
            val wrapped: List<Any?> = try {
              listOf(api.getNat64Prefix(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.LinkPropertiesProxyApi.getPrivateDnsServerName", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkProperties
            val wrapped: List<Any?> = try {
              listOf(api.getPrivateDnsServerName(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.LinkPropertiesProxyApi.getRoutes", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkProperties
            val wrapped: List<Any?> = try {
              listOf(api.getRoutes(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.LinkPropertiesProxyApi.isPrivateDnsActive", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkProperties
            val wrapped: List<Any?> = try {
              listOf(api.isPrivateDnsActive(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.LinkPropertiesProxyApi.isWakeOnLanSupported", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkProperties
            val wrapped: List<Any?> = try {
              listOf(api.isWakeOnLanSupported(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.LinkPropertiesProxyApi.setDhcpServerAddress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkProperties
            val serverAddressArg = args[1] as java.net.Inet4Address?
            val wrapped: List<Any?> = try {
              api.setDhcpServerAddress(pigeon_instanceArg, serverAddressArg)
              listOf(null)
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.LinkPropertiesProxyApi.setDnsServers", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkProperties
            val dnsServersArg = args[1] as List<java.net.InetAddress>
            val wrapped: List<Any?> = try {
              api.setDnsServers(pigeon_instanceArg, dnsServersArg)
              listOf(null)
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.LinkPropertiesProxyApi.setDomains", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkProperties
            val domainsArg = args[1] as String?
            val wrapped: List<Any?> = try {
              api.setDomains(pigeon_instanceArg, domainsArg)
              listOf(null)
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.LinkPropertiesProxyApi.setHttpProxy", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkProperties
            val proxyArg = args[1] as android.net.ProxyInfo?
            val wrapped: List<Any?> = try {
              api.setHttpProxy(pigeon_instanceArg, proxyArg)
              listOf(null)
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.LinkPropertiesProxyApi.setInterfaceName", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkProperties
            val ifaceArg = args[1] as String?
            val wrapped: List<Any?> = try {
              api.setInterfaceName(pigeon_instanceArg, ifaceArg)
              listOf(null)
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.LinkPropertiesProxyApi.setLinkAddresses", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkProperties
            val addressesArg = args[1] as List<android.net.LinkAddress>
            val wrapped: List<Any?> = try {
              api.setLinkAddresses(pigeon_instanceArg, addressesArg)
              listOf(null)
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.LinkPropertiesProxyApi.setMtu", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkProperties
            val mtuArg = args[1] as Long
            val wrapped: List<Any?> = try {
              api.setMtu(pigeon_instanceArg, mtuArg)
              listOf(null)
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.LinkPropertiesProxyApi.setNat64Prefix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkProperties
            val prefixArg = args[1] as android.net.IpPrefix?
            val wrapped: List<Any?> = try {
              api.setNat64Prefix(pigeon_instanceArg, prefixArg)
              listOf(null)
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of LinkPropertiesProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.net.LinkProperties, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.connectivity_manager.LinkPropertiesProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiLinkAddressProxyApi(open val pigeonRegistrar: ConnectivityManagerApiPigeonProxyApiRegistrar) {
  abstract fun getAddress(pigeon_instance: android.net.LinkAddress): java.net.InetAddress

  abstract fun getFlags(pigeon_instance: android.net.LinkAddress): Long

  abstract fun getPrefixLength(pigeon_instance: android.net.LinkAddress): Long

  abstract fun getScope(pigeon_instance: android.net.LinkAddress): Long

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiLinkAddressProxyApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: ConnectivityManagerApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.LinkAddressProxyApi.getAddress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkAddress
            val wrapped: List<Any?> = try {
              listOf(api.getAddress(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.LinkAddressProxyApi.getFlags", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkAddress
            val wrapped: List<Any?> = try {
              listOf(api.getFlags(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.LinkAddressProxyApi.getPrefixLength", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkAddress
            val wrapped: List<Any?> = try {
              listOf(api.getPrefixLength(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.LinkAddressProxyApi.getScope", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.LinkAddress
            val wrapped: List<Any?> = try {
              listOf(api.getScope(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of LinkAddressProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.net.LinkAddress, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.connectivity_manager.LinkAddressProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiIpPrefixProxyApi(open val pigeonRegistrar: ConnectivityManagerApiPigeonProxyApiRegistrar) {
  abstract fun contains(pigeon_instance: android.net.IpPrefix, address: java.net.InetAddress): Boolean

  abstract fun getAddress(pigeon_instance: android.net.IpPrefix): java.net.InetAddress

  abstract fun getPrefixLength(pigeon_instance: android.net.IpPrefix): Long

  abstract fun getRawAddress(pigeon_instance: android.net.IpPrefix): ByteArray

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiIpPrefixProxyApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: ConnectivityManagerApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.IpPrefixProxyApi.contains", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.IpPrefix
            val addressArg = args[1] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              listOf(api.contains(pigeon_instanceArg, addressArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.IpPrefixProxyApi.getAddress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.IpPrefix
            val wrapped: List<Any?> = try {
              listOf(api.getAddress(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.IpPrefixProxyApi.getPrefixLength", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.IpPrefix
            val wrapped: List<Any?> = try {
              listOf(api.getPrefixLength(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.IpPrefixProxyApi.getRawAddress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.IpPrefix
            val wrapped: List<Any?> = try {
              listOf(api.getRawAddress(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of IpPrefixProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.net.IpPrefix, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.connectivity_manager.IpPrefixProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiSocketKeepaliveProxyApi(open val pigeonRegistrar: ConnectivityManagerApiPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of SocketKeepaliveProxyApi and attaches it to [pigeon_instanceArg]. */
  @androidx.annotation.RequiresApi(api = 29)
  fun pigeon_newInstance(pigeon_instanceArg: android.net.SocketKeepalive, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.connectivity_manager.SocketKeepaliveProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiSocketKeepaliveCallbackProxyApi(open val pigeonRegistrar: ConnectivityManagerApiPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of SocketKeepaliveCallbackProxyApi and attaches it to [pigeon_instanceArg]. */
  @androidx.annotation.RequiresApi(api = 29)
  fun pigeon_newInstance(pigeon_instanceArg: android.net.SocketKeepalive.Callback, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.connectivity_manager.SocketKeepaliveCallbackProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiIpSecManagerUdpEncapsulationSocketProxyApi(open val pigeonRegistrar: ConnectivityManagerApiPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of IpSecManagerUdpEncapsulationSocketProxyApi and attaches it to [pigeon_instanceArg]. */
  @androidx.annotation.RequiresApi(api = 28)
  fun pigeon_newInstance(pigeon_instanceArg: android.net.IpSecManager.UdpEncapsulationSocket, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.connectivity_manager.IpSecManagerUdpEncapsulationSocketProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiProxyInfoProxyApi(open val pigeonRegistrar: ConnectivityManagerApiPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ProxyInfoProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.net.ProxyInfo, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.connectivity_manager.ProxyInfoProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiTransportInfoProxyApi(open val pigeonRegistrar: ConnectivityManagerApiPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of TransportInfoProxyApi and attaches it to [pigeon_instanceArg]. */
  @androidx.annotation.RequiresApi(api = 29)
  fun pigeon_newInstance(pigeon_instanceArg: android.net.TransportInfo, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.connectivity_manager.TransportInfoProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiRouteInfoProxyApi(open val pigeonRegistrar: ConnectivityManagerApiPigeonProxyApiRegistrar) {
  abstract fun getDestination(pigeon_instance: android.net.RouteInfo): android.net.IpPrefix

  abstract fun getGateway(pigeon_instance: android.net.RouteInfo): java.net.InetAddress?

  abstract fun getInterface(pigeon_instance: android.net.RouteInfo): String?

  abstract fun getType(pigeon_instance: android.net.RouteInfo): RouteTypeApi

  abstract fun hasGateway(pigeon_instance: android.net.RouteInfo): Boolean

  abstract fun isDefaultRoute(pigeon_instance: android.net.RouteInfo): Boolean

  abstract fun matches(pigeon_instance: android.net.RouteInfo, destination: java.net.InetAddress): Boolean

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiRouteInfoProxyApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: ConnectivityManagerApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.RouteInfoProxyApi.getDestination", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.RouteInfo
            val wrapped: List<Any?> = try {
              listOf(api.getDestination(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.RouteInfoProxyApi.getGateway", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.RouteInfo
            val wrapped: List<Any?> = try {
              listOf(api.getGateway(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.RouteInfoProxyApi.getInterface", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.RouteInfo
            val wrapped: List<Any?> = try {
              listOf(api.getInterface(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.RouteInfoProxyApi.getType", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.RouteInfo
            val wrapped: List<Any?> = try {
              listOf(api.getType(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.RouteInfoProxyApi.hasGateway", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.RouteInfo
            val wrapped: List<Any?> = try {
              listOf(api.hasGateway(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.RouteInfoProxyApi.isDefaultRoute", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.RouteInfo
            val wrapped: List<Any?> = try {
              listOf(api.isDefaultRoute(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.RouteInfoProxyApi.matches", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.net.RouteInfo
            val destinationArg = args[1] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              listOf(api.matches(pigeon_instanceArg, destinationArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of RouteInfoProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.net.RouteInfo, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.connectivity_manager.RouteInfoProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiInetAddressesProxyApi(open val pigeonRegistrar: ConnectivityManagerApiPigeonProxyApiRegistrar) {
  abstract fun isNumericAddress(address: String): Boolean

  abstract fun parseNumericAddress(address: String): java.net.InetAddress

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiInetAddressesProxyApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: ConnectivityManagerApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.InetAddressesProxyApi.isNumericAddress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val addressArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.isNumericAddress(addressArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.InetAddressesProxyApi.parseNumericAddress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val addressArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.parseNumericAddress(addressArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of InetAddressesProxyApi and attaches it to [pigeon_instanceArg]. */
  @androidx.annotation.RequiresApi(api = 29)
  fun pigeon_newInstance(pigeon_instanceArg: android.net.InetAddresses, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.connectivity_manager.InetAddressesProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiFileDescriptorProxyApi(open val pigeonRegistrar: ConnectivityManagerApiPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of FileDescriptorProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: java.io.FileDescriptor, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.connectivity_manager.FileDescriptorProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiInetAddressProxyApi(open val pigeonRegistrar: ConnectivityManagerApiPigeonProxyApiRegistrar) {
  abstract fun getAllByName(host: String?): List<java.net.InetAddress>

  abstract fun getByAddress1(addr: ByteArray): java.net.InetAddress

  abstract fun getByAddress2(host: String?, addr: ByteArray): java.net.InetAddress

  abstract fun getByName(host: String?): java.net.InetAddress

  abstract fun getLocalHost(): java.net.InetAddress

  abstract fun getLoopbackAddress(): java.net.InetAddress

  abstract fun getAddress(pigeon_instance: java.net.InetAddress): ByteArray

  abstract fun getCanonicalHostName(pigeon_instance: java.net.InetAddress): String

  abstract fun getHostAddress(pigeon_instance: java.net.InetAddress): String?

  abstract fun getHostName(pigeon_instance: java.net.InetAddress): String

  abstract fun isAnyLocalAddress(pigeon_instance: java.net.InetAddress): Boolean

  abstract fun isLinkLocalAddress(pigeon_instance: java.net.InetAddress): Boolean

  abstract fun isLoopbackAddress(pigeon_instance: java.net.InetAddress): Boolean

  abstract fun isMcGlobal(pigeon_instance: java.net.InetAddress): Boolean

  abstract fun isMcLinkLocal(pigeon_instance: java.net.InetAddress): Boolean

  abstract fun isMcNodeLocal(pigeon_instance: java.net.InetAddress): Boolean

  abstract fun isMcOrgLocal(pigeon_instance: java.net.InetAddress): Boolean

  abstract fun isMcSiteLocal(pigeon_instance: java.net.InetAddress): Boolean

  abstract fun isMulticastAddress(pigeon_instance: java.net.InetAddress): Boolean

  abstract fun isReachable1(pigeon_instance: java.net.InetAddress, timeout: Long): Boolean

  abstract fun isReachable2(pigeon_instance: java.net.InetAddress, netif: java.net.NetworkInterface?, ttl: Long, timetout: Long): Boolean

  abstract fun isSiteLocalAddress(pigeon_instance: java.net.InetAddress): Boolean

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiInetAddressProxyApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: ConnectivityManagerApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.InetAddressProxyApi.getAllByName", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hostArg = args[0] as String?
            val wrapped: List<Any?> = try {
              listOf(api.getAllByName(hostArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.InetAddressProxyApi.getByAddress1", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val addrArg = args[0] as ByteArray
            val wrapped: List<Any?> = try {
              listOf(api.getByAddress1(addrArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.InetAddressProxyApi.getByAddress2", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hostArg = args[0] as String?
            val addrArg = args[1] as ByteArray
            val wrapped: List<Any?> = try {
              listOf(api.getByAddress2(hostArg, addrArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.InetAddressProxyApi.getByName", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hostArg = args[0] as String?
            val wrapped: List<Any?> = try {
              listOf(api.getByName(hostArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.InetAddressProxyApi.getLocalHost", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getLocalHost())
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.InetAddressProxyApi.getLoopbackAddress", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getLoopbackAddress())
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.InetAddressProxyApi.getAddress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              listOf(api.getAddress(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.InetAddressProxyApi.getCanonicalHostName", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              listOf(api.getCanonicalHostName(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.InetAddressProxyApi.getHostAddress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              listOf(api.getHostAddress(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.InetAddressProxyApi.getHostName", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              listOf(api.getHostName(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.InetAddressProxyApi.isAnyLocalAddress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              listOf(api.isAnyLocalAddress(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.InetAddressProxyApi.isLinkLocalAddress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              listOf(api.isLinkLocalAddress(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.InetAddressProxyApi.isLoopbackAddress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              listOf(api.isLoopbackAddress(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.InetAddressProxyApi.isMcGlobal", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              listOf(api.isMcGlobal(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.InetAddressProxyApi.isMcLinkLocal", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              listOf(api.isMcLinkLocal(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.InetAddressProxyApi.isMcNodeLocal", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              listOf(api.isMcNodeLocal(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.InetAddressProxyApi.isMcOrgLocal", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              listOf(api.isMcOrgLocal(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.InetAddressProxyApi.isMcSiteLocal", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              listOf(api.isMcSiteLocal(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.InetAddressProxyApi.isMulticastAddress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              listOf(api.isMulticastAddress(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.InetAddressProxyApi.isReachable1", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val timeoutArg = args[1] as Long
            val wrapped: List<Any?> = try {
              listOf(api.isReachable1(pigeon_instanceArg, timeoutArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.InetAddressProxyApi.isReachable2", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val netifArg = args[1] as java.net.NetworkInterface?
            val ttlArg = args[2] as Long
            val timetoutArg = args[3] as Long
            val wrapped: List<Any?> = try {
              listOf(api.isReachable2(pigeon_instanceArg, netifArg, ttlArg, timetoutArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.InetAddressProxyApi.isSiteLocalAddress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.InetAddress
            val wrapped: List<Any?> = try {
              listOf(api.isSiteLocalAddress(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of InetAddressProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: java.net.InetAddress, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.connectivity_manager.InetAddressProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiInet4AddressProxyApi(open val pigeonRegistrar: ConnectivityManagerApiPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of Inet4AddressProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: java.net.Inet4Address, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.connectivity_manager.Inet4AddressProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiInetAddressProxyApi] used to access callback methods */
  fun pigeon_getPigeonApiInetAddressProxyApi(): PigeonApiInetAddressProxyApi
  {
    return pigeonRegistrar.getPigeonApiInetAddressProxyApi()
  }

}
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiInet6AddressProxyApi(open val pigeonRegistrar: ConnectivityManagerApiPigeonProxyApiRegistrar) {
  abstract fun getByAddress3(host: String, addr: ByteArray, nif: java.net.NetworkInterface): java.net.Inet6Address

  abstract fun getByAddress4(host: String, addr: ByteArray, scopeId: Long): java.net.Inet6Address

  abstract fun isIPv4CompatibleAddress(pigeon_instance: java.net.Inet6Address): Boolean

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiInet6AddressProxyApi?) {
      val codec = api?.pigeonRegistrar?.codec ?: ConnectivityManagerApiPigeonCodec()
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.Inet6AddressProxyApi.getByAddress3", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hostArg = args[0] as String
            val addrArg = args[1] as ByteArray
            val nifArg = args[2] as java.net.NetworkInterface
            val wrapped: List<Any?> = try {
              listOf(api.getByAddress3(hostArg, addrArg, nifArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.Inet6AddressProxyApi.getByAddress4", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hostArg = args[0] as String
            val addrArg = args[1] as ByteArray
            val scopeIdArg = args[2] as Long
            val wrapped: List<Any?> = try {
              listOf(api.getByAddress4(hostArg, addrArg, scopeIdArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.connectivity_manager.Inet6AddressProxyApi.isIPv4CompatibleAddress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as java.net.Inet6Address
            val wrapped: List<Any?> = try {
              listOf(api.isIPv4CompatibleAddress(pigeon_instanceArg))
            } catch (exception: Throwable) {
              ConnectivityManagerApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of Inet6AddressProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: java.net.Inet6Address, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.connectivity_manager.Inet6AddressProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiInetAddressProxyApi] used to access callback methods */
  fun pigeon_getPigeonApiInetAddressProxyApi(): PigeonApiInetAddressProxyApi
  {
    return pigeonRegistrar.getPigeonApiInetAddressProxyApi()
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiInetSocketAddressProxyApi(open val pigeonRegistrar: ConnectivityManagerApiPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of InetSocketAddressProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: java.net.InetSocketAddress, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.connectivity_manager.InetSocketAddressProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiNetworkInterfaceProxyApi(open val pigeonRegistrar: ConnectivityManagerApiPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of NetworkInterfaceProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: java.net.NetworkInterface, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.connectivity_manager.NetworkInterfaceProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiSocketProxyApi(open val pigeonRegistrar: ConnectivityManagerApiPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of SocketProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: java.net.Socket, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.connectivity_manager.SocketProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiDatagramSocketProxyApi(open val pigeonRegistrar: ConnectivityManagerApiPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of DatagramSocketProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: java.net.DatagramSocket, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.connectivity_manager.DatagramSocketProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiUrlProxyApi(open val pigeonRegistrar: ConnectivityManagerApiPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of UrlProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: java.net.URL, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.connectivity_manager.UrlProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiUrlConnectionProxyApi(open val pigeonRegistrar: ConnectivityManagerApiPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of UrlConnectionProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: java.net.URLConnection, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.connectivity_manager.UrlConnectionProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiSocketFactoryProxyApi(open val pigeonRegistrar: ConnectivityManagerApiPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of SocketFactoryProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: javax.net.SocketFactory, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.connectivity_manager.SocketFactoryProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
@Suppress("UNCHECKED_CAST")
open class PigeonApiProxyProxyApi(open val pigeonRegistrar: ConnectivityManagerApiPigeonProxyApiRegistrar) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ProxyProxyApi and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: java.net.Proxy, callback: (Result<Unit>) -> Unit)
{
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              ConnectivityManagerError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
    }     else if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      callback(Result.success(Unit))
    }     else {
      val pigeon_identifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
      val binaryMessenger = pigeonRegistrar.binaryMessenger
      val codec = pigeonRegistrar.codec
      val channelName = "dev.flutter.pigeon.connectivity_manager.ProxyProxyApi.pigeon_newInstance"
      val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
      channel.send(listOf(pigeon_identifierArg)) {
        if (it is List<*>) {
          if (it.size > 1) {
            callback(Result.failure(ConnectivityManagerError(it[0] as String, it[1] as String, it[2] as String?)))
          } else {
            callback(Result.success(Unit))
          }
        } else {
          callback(Result.failure(ConnectivityManagerApiPigeonUtils.createConnectionError(channelName)))
        } 
      }
    }
  }

}
